"""
Tyson Reimer
University of Manitoba
June 19th, 2019
"""

import os
import pickle
import numpy as np

###############################################################################


def load_pickle(path):
    """Loads a pickle file

    Parameters
    ----------
    path : str
        The full path to the .pickle file that will be loaded

    Returns
    -------
    loaded_var :
        The loaded variable, can be array_like, int, str, dict_to_save,
        etc.
    """

    with open(path, "rb") as handle:
        loaded_var = pickle.load(handle)

    return loaded_var


def save_pickle(var, path):
    """Saves the var to a .pickle file at the path specified

    Parameters
    ----------
    var : object
        A variable that will be saved
    path : str
        The full path of the saved .pickle file
    """

    with open(path, "wb") as handle:
        pickle.dump(var, handle, protocol=pickle.HIGHEST_PROTOCOL)


def load_birrs_txt(txt_path):
    """Loads a raw .txt file generated by the BIRRS system from a scan

    Loads the file with path txt_path and returns the data stored in
    that arr in the time or frequency domain. Assumes the usual format
    produced by the BIRRS software as of May 7, 2019: for N antenna
    positions, the raw data file contains 2N columns. The first column
    contains the real part of the scattering parameter for the first
    antenna position, the second column contains the imag part, the
    third column contains the real part for the second antenna
    position, etc.

    Parameters
    ----------
    txt_path : str
        The complete path to the file containing the raw data from a
        measured scan, in the BIRRS software format as of May 7, 2019

    Returns
    -------
    fd_data : array_like
        2D arr containing the measured radar signal for each antenna
        position used in the scan, in the frequency domain
    """

    # Load the data
    raw_data = np.genfromtxt(txt_path, dtype="float", delimiter=",")

    # Find the number of frequencies and scan positions
    n_freqs, n_ant_pos = raw_data.shape
    n_ant_pos //= 2

    # Initialize arr for storing the frequency domain data
    fd_data = np.zeros([n_freqs, n_ant_pos], dtype=complex)

    for ant_pos in range(n_ant_pos):
        # Combine the real and imaginary parts of the scattering
        # parameter, as they're stored in the file
        fd_data[:, ant_pos] = (
            raw_data[:, 2 * ant_pos] + 1j * raw_data[:, 2 * ant_pos + 1]
        )

    return fd_data


def clean_birrs_folder(folder_path):
    """Clean folder of .txt files generated from BIRRS scan

    Assumes that the data files are '.txt' files, are identified by a
    standard 'exptXX' str, where XX is the experiment number (ex:
    01, 02, ..., 10, 11, etc.), and renames files to 'sAB_exptXX.txt',
    where A is the input port and B is the output port (ex: s21, s11).
    Also removes any 'INCOMPLETE' files generate due to early-stopping
    of the BIRRS system during a scan

    Parameters
    ----------
    folder_path : str
        Path to the folder that will be cleaned

    """

    # The files in the directory
    fs_in_dir = os.listdir(folder_path)

    for ii in fs_in_dir:  # For each file in the directory
        # If this file is a target file, i.e., it contains 'expt'
        # and the identifier strings 'Mono' or 'Multi', because
        # s11 data is saved with str 'Mono', and s21 data with str
        # 'Multi'
        if ("expt" in ii) and ("Mono" in ii or "Multi" in ii):
            # If the scan was incomplete due to early-stopping of the
            # BIRRS system during a scan
            if "INCOMPLETE" in ii:
                # Delete the file
                os.remove(os.path.join(folder_path, ii))

            else:  # If the scan was complete
                # The index of where the str 'expt' appears in the fname
                expt_idx = ii.index("expt")

                if "Mono" in ii:  # If the data was from s11
                    new_name = (
                        "s11_%s.txt" % ii[expt_idx : expt_idx + len("expt") + 2]
                    )
                else:  # If the data was from s21
                    new_name = (
                        "s21_%s.txt" % ii[expt_idx : expt_idx + len("expt") + 2]
                    )

                # Rename the completed scan file
                os.rename(
                    os.path.join(folder_path, ii),
                    os.path.join(folder_path, new_name),
                )


def count_n_scans(folder_path):
    """Return the number of unique scans in a scan folder from BIRRS

    Parameters
    ----------
    folder_path : str
        Path to the folder containing the raw .txt files from the scans

    Returns
    -------
    n_scans : int
        The number of scans used to produce the data in the folder
    """

    # The files in the directory
    fs_in_dir = os.listdir(folder_path)

    n_scans = 0

    for ii in fs_in_dir:  # For each file in the directory
        # If this file is a target file, i.e., it contains 'expt'
        # and the identifier strings 'Mono' or 's11', indicating the
        # scan was from the S11 antenna
        if ("expt" in ii) and ("Mono" in ii or "s11" in ii):
            n_scans += 1

    return n_scans
